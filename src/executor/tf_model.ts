/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */

import * as dl from 'deeplearn';
import {NamedTensorMap} from 'deeplearn/dist/types';
import {WeightsManifestConfig} from 'deeplearn/dist/weights_loader';

import * as data from '../data/index';
import {tensorflow} from '../data/index';
import {OperationMapper} from '../operations/index';

import {GraphExecutor} from './graph_executor';

export class TFModel {
  private executor: GraphExecutor;
  private version = 'n/a';
  private weightManifest: WeightsManifestConfig;
  private pathPrefix: string;
  // Returns the version information for the tensorflow model GraphDef.
  get modelVersion(): string {
    return this.version;
  }
  /**
   * @param modelUrl url for the model file generated by scripts/convert.py
   * script.
   * @param weightManifestUrl url for the weight file generated by
   * scripts/convert.py script.
   */
  constructor(private modelUrl: string, private weightManifestUrl: string) {
    this.getPathPrefix();
  }

  private getPathPrefix() {
    const url = new URL(this.weightManifestUrl);
    const segments = url.pathname.split('/');
    segments.splice(-1);
    url.pathname = segments.join('/');
    this.pathPrefix = url.toString();
  }

  /**
   * Loads the model topology file and build the in memory graph of the model.
   */
  private loadRemoteProtoFile(): Promise<tensorflow.GraphDef> {
    return fetch(new Request(this.modelUrl))
        .then(res => res.arrayBuffer())
        .then(buffer => tensorflow.GraphDef.decode(new Uint8Array(buffer)))
        .catch(error => {
          throw new Error(`${this.modelUrl} not found. ${error}`);
        });
  }

  /**
   * Loads and parses the weight manifest JSON file from the url, weight loader
   * uses the manifest config to download the set of weight files.
   */
  private loadWeightManifest(): Promise<void> {
    return fetch(new Request(this.weightManifestUrl))
        .then(res => res.clone().json())
        .then(config => this.weightManifest = config)
        .catch(error => {
          throw new Error(`${this.weightManifestUrl} not found. ${error}`);
        });
  }
  /**
   * Loads the model and weight files, construct the in memory weight map and
   * compile the inference graph.
   */
  load(): Promise<boolean> {
    const graphPromise = this.loadRemoteProtoFile();
    graphPromise.then(
        (graph) => this.version =
            `${graph.versions.producer}.${graph.versions.minConsumer}`);
    const weightMapPromise = this.loadWeightManifest().then(
        () => dl.loadWeights(this.weightManifest, this.pathPrefix));
    const executorPromise = graphPromise.then(
        graph => this.executor =
            new GraphExecutor(OperationMapper.Instance.transformGraph(graph)));

    return Promise.all([weightMapPromise, executorPromise])
        .then(([weightMap, executor]) => {
          executor.weightMap = weightMap;
          return true;
        });
  }

  /**
   * Executes infrerence for the model for given input tensors.
   * @param inputs tensor map of the inputs for the model, keyed by the input
   * node names.
   */
  eval(inputs: NamedTensorMap): NamedTensorMap {
    return this.executor.execute(inputs);
  }

  /**
   * Releases the memory used by the weight tensors.
   */
  dispose() {
    this.executor.dispose();
  }
}
