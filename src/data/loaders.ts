/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// tslint:disable-next-line:max-line-length
import * as dl from 'deeplearn';
import {NamedTensorMap} from 'deeplearn/dist/types';

import {tensorflow} from './index';

/**
 * Loads the model topology file and build the in memory graph of the model.
 * @param url for the model file generated by the convert.py script.
 */
export function loadRemoteProtoFile(url: string): Promise<tensorflow.GraphDef> {
  return fetch(new Request(url))
      .then(res => res.arrayBuffer())
      .then(buffer => tensorflow.GraphDef.decode(new Uint8Array(buffer)));
}

/**
 * Loads the model weight file into memory.
 * @param url for the model file generated by the convert.py script.
 */
export function loadRemoteWeightFile(url: string): Promise<ArrayBuffer> {
  return fetch(new Request(url)).then(res => res.arrayBuffer());
}

/**
 * Builds the map for all weights using the model topology and weight
 * ArrayBuffer.
 * @param url for the model file generated by the convert.py script.
 */
export function buildWeightMap(
    graphPromise: Promise<tensorflow.GraphDef>,
    weightPromise: Promise<ArrayBuffer>): Promise<NamedTensorMap> {
  const tensorMap: NamedTensorMap = {};
  return Promise.all([graphPromise, weightPromise]).then(([graph, weight]) => {
    const constNodes = graph.node.filter(node => node.op === 'Const');
    constNodes.forEach(node => {
      const index = node.attr['index'].i as number;
      const length = node.attr['length'].i as number;
      const tensor = node.attr['value'].tensor;
      tensorMap[node.name] = buildTensor(index, length, weight, tensor);
    });
    return tensorMap;
  });
}

/**
 * Builds the deeplearn Tensor for the weight defined by the model.
 * @param index offset the weight in the ArrayBuffer
 * @param length length of the weight
 * @param weight weight Arraybuffer
 * @param tensor Tensor definition from model graph with shape and dtype
 * information
 */
function buildTensor(
    index: number, length: number, weight: ArrayBuffer,
    tensor: tensorflow.ITensor): dl.Tensor {
  const dims = tensor.tensorShape.dim;
  const dimSizes = dims.map(dim => dim.size) as number[];
  switch (tensor.dtype) {
    case tensorflow.DataType.DT_INT32: {
      const values = new Int32Array(weight, index, length);
      return toNDArray(dimSizes, values, 'int32');
    }
    case tensorflow.DataType.DT_FLOAT: {
      const values = new Float32Array(weight, index, length);
      return toNDArray(dimSizes, values, 'float32');
    }
    case tensorflow.DataType.DT_BOOL: {
      const values = new Uint8Array(weight, index, length);
      return toNDArray(dimSizes, values, 'bool');
    }
    default:
      throw new Error(`tensor data type: ${tensor.dtype} is not supported`);
  }
}

function toNDArray(
    shape: number[],
    values: boolean[]|number[]|Int32Array|Float32Array|Uint8Array,
    dtype: 'float32'|'int32'|'bool'): dl.Tensor {
  if (values instanceof Int32Array || values instanceof Float32Array ||
      values instanceof Uint8Array) {
    values = Array.prototype.slice.call(values);
  }

  if (values.length === 1) {
    const len = shape.reduce((accu, curr) => accu * curr, 1);
    values = new Array(len).fill(values[0]);
  }

  switch (shape.length) {
    case 0:
      return dl.scalar(values[0], dtype);
    case 1: {
      return dl.tensor1d(values, dtype);
    }
    case 2:
      return dl.tensor2d(
          shape as [number, number], values as [number, number], dtype);
    case 3:
      return dl.tensor3d(
          shape as [number, number, number], values as [number, number, number],
          dtype);
    case 4:
      return dl.tensor4d(
          shape as [number, number, number, number],
          values as [number, number, number, number], dtype);
    default:
      throw new Error('Tensor with dimension higher than 4 is not supported');
  }
}
